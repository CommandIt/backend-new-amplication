/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSoldierArgs } from "./CreateSoldierArgs";
import { UpdateSoldierArgs } from "./UpdateSoldierArgs";
import { DeleteSoldierArgs } from "./DeleteSoldierArgs";
import { SoldierFindManyArgs } from "./SoldierFindManyArgs";
import { SoldierFindUniqueArgs } from "./SoldierFindUniqueArgs";
import { Soldier } from "./Soldier";
import { OpinionFindManyArgs } from "../../opinion/base/OpinionFindManyArgs";
import { Opinion } from "../../opinion/base/Opinion";
import { Team } from "../../team/base/Team";
import { SoldierService } from "../soldier.service";

@graphql.Resolver(() => Soldier)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SoldierResolverBase {
  constructor(
    protected readonly service: SoldierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "read",
    possession: "any",
  })
  async _soldiersMeta(
    @graphql.Args() args: SoldierFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Soldier])
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "read",
    possession: "any",
  })
  async soldiers(
    @graphql.Args() args: SoldierFindManyArgs
  ): Promise<Soldier[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Soldier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "read",
    possession: "own",
  })
  async soldier(
    @graphql.Args() args: SoldierFindUniqueArgs
  ): Promise<Soldier | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Soldier)
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "create",
    possession: "any",
  })
  async createSoldier(
    @graphql.Args() args: CreateSoldierArgs
  ): Promise<Soldier> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Soldier)
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "update",
    possession: "any",
  })
  async updateSoldier(
    @graphql.Args() args: UpdateSoldierArgs
  ): Promise<Soldier | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Soldier)
  @nestAccessControl.UseRoles({
    resource: "Soldier",
    action: "delete",
    possession: "any",
  })
  async deleteSoldier(
    @graphql.Args() args: DeleteSoldierArgs
  ): Promise<Soldier | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Opinion])
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "read",
    possession: "any",
  })
  async opinions(
    @graphql.Parent() parent: Soldier,
    @graphql.Args() args: OpinionFindManyArgs
  ): Promise<Opinion[]> {
    const results = await this.service.findOpinions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Team, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async team(@graphql.Parent() parent: Soldier): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
