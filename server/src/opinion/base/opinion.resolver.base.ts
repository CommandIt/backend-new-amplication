/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOpinionArgs } from "./CreateOpinionArgs";
import { UpdateOpinionArgs } from "./UpdateOpinionArgs";
import { DeleteOpinionArgs } from "./DeleteOpinionArgs";
import { OpinionFindManyArgs } from "./OpinionFindManyArgs";
import { OpinionFindUniqueArgs } from "./OpinionFindUniqueArgs";
import { Opinion } from "./Opinion";
import { Solider } from "../../solider/base/Solider";
import { OpinionService } from "../opinion.service";

@graphql.Resolver(() => Opinion)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OpinionResolverBase {
  constructor(
    protected readonly service: OpinionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "read",
    possession: "any",
  })
  async _opinionsMeta(
    @graphql.Args() args: OpinionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Opinion])
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "read",
    possession: "any",
  })
  async opinions(
    @graphql.Args() args: OpinionFindManyArgs
  ): Promise<Opinion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Opinion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "read",
    possession: "own",
  })
  async opinion(
    @graphql.Args() args: OpinionFindUniqueArgs
  ): Promise<Opinion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opinion)
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "create",
    possession: "any",
  })
  async createOpinion(
    @graphql.Args() args: CreateOpinionArgs
  ): Promise<Opinion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        solider: {
          connect: args.data.solider,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opinion)
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "update",
    possession: "any",
  })
  async updateOpinion(
    @graphql.Args() args: UpdateOpinionArgs
  ): Promise<Opinion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          solider: {
            connect: args.data.solider,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Opinion)
  @nestAccessControl.UseRoles({
    resource: "Opinion",
    action: "delete",
    possession: "any",
  })
  async deleteOpinion(
    @graphql.Args() args: DeleteOpinionArgs
  ): Promise<Opinion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Solider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Solider",
    action: "read",
    possession: "any",
  })
  async solider(@graphql.Parent() parent: Opinion): Promise<Solider | null> {
    const result = await this.service.getSolider(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
