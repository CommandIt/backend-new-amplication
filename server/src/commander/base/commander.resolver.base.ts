/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCommanderArgs } from "./CreateCommanderArgs";
import { UpdateCommanderArgs } from "./UpdateCommanderArgs";
import { DeleteCommanderArgs } from "./DeleteCommanderArgs";
import { CommanderFindManyArgs } from "./CommanderFindManyArgs";
import { CommanderFindUniqueArgs } from "./CommanderFindUniqueArgs";
import { Commander } from "./Commander";
import { Team } from "../../team/base/Team";
import { User } from "../../user/base/User";
import { CommanderService } from "../commander.service";

@graphql.Resolver(() => Commander)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CommanderResolverBase {
  constructor(
    protected readonly service: CommanderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "read",
    possession: "any",
  })
  async _commandersMeta(
    @graphql.Args() args: CommanderFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Commander])
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "read",
    possession: "any",
  })
  async commanders(
    @graphql.Args() args: CommanderFindManyArgs
  ): Promise<Commander[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Commander, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "read",
    possession: "own",
  })
  async commander(
    @graphql.Args() args: CommanderFindUniqueArgs
  ): Promise<Commander | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commander)
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "create",
    possession: "any",
  })
  async createCommander(
    @graphql.Args() args: CreateCommanderArgs
  ): Promise<Commander> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commander)
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "update",
    possession: "any",
  })
  async updateCommander(
    @graphql.Args() args: UpdateCommanderArgs
  ): Promise<Commander | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Commander)
  @nestAccessControl.UseRoles({
    resource: "Commander",
    action: "delete",
    possession: "any",
  })
  async deleteCommander(
    @graphql.Args() args: DeleteCommanderArgs
  ): Promise<Commander | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Team, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async team(@graphql.Parent() parent: Commander): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Commander): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
